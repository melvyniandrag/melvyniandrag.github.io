<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Melvyn's blog</title><link href="https://melvyniandrag.github.io/" rel="alternate"></link><link href="https://melvyniandrag.github.io/feeds/embedded.atom.xml" rel="self"></link><id>https://melvyniandrag.github.io/</id><updated>2018-03-16T00:00:00+01:00</updated><entry><title>What the heck is volatile anyway?</title><link href="https://melvyniandrag.github.io/what%20is%20volatile.html" rel="alternate"></link><updated>2018-03-16T00:00:00+01:00</updated><author><name>Melvyn Drag</name></author><id>tag:melvyniandrag.github.io,2018-03-16:what is volatile.html</id><summary type="html">&lt;p&gt;I've been doing some embedded development at work and on hobby rpi and arduino projects. Seems like I ought to figure out what the point of the volatile keyword is at this stage in the game. Here's the reference I found about it: &lt;a class="reference external" href="https://www.embedded.com/electronics-blogs/beginner-s-corner/4023801/Introduction-to-the-Volatile-Keyword/"&gt;volatileReference&lt;/a&gt; volatile reference.&lt;/p&gt;
&lt;p&gt;I'm unable after a half hour of experimenting to make heads or tails of it. It seems like the compiler will optimize away bits of code that deal with a variable that ought not to change. I think this is a main concern in multithreaded programming. Now I wonder if the keyword is still relevant or if the compilers these days are all aware of multithreaded programming and volatile is unneccesary.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;static int x;
// static volatile int x;

void * f1( void* args )
{
        x = 0;
        while( x == 0 )
        {
                sleep(1);
        }
        return NULL;
}

void * f2( void * args )
{
        x = 10;
        return NULL;
}
int main(){
        x = 0;
        pthread_t t1;
        pthread_create( &amp;amp;t1, NULL, f1, NULL );
        int rc1;
        rc1 = pthread_detach( t1 );

        pthread_t t2;
        pthread_create( &amp;amp;t2, NULL, f2, NULL );
        int rc2;
        rc2 = pthread_detach( t2 );
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I've compiled this without the volatile keyword with -O3 and without and either way it doesn't loop infinitely. I guess my understanding from the code snippet on embedded.com was that the compiler ought to be dumb and think that x would be 0 forever and optimize the x==0 away, making the loop run forever. That didn't happen, I haven't come across &amp;quot;volatile&amp;quot; in the professional work I've done, and it's not in the texts I've read. I'm busy and I'm just going to have to assume &amp;quot;volatile&amp;quot; isn't worth using. I'll talk to coworkers and read a bit more later but for now that's the conclusion I'm drawing and I'm going to sleep.&lt;/p&gt;
</summary><category term="embedded c++ c"></category></entry></feed>